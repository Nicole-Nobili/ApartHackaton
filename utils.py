import goodfire
from typing import Str, List

class Retriever:
    def __init__(self, client: goodfire.Client, variant: str):
        self.client = client
        self.variant = variant

    def retrieve_features(self, prompt: Str):
        """Retrieve features relevant to a given prompt.

        Args:
            target_behavior (str): The desired behavior to evaluate against
        Returns:
            List[features]: List of feature values retrieved from the search
        """
        pirate_features, relevance = self.client.features.search(
            prompt,
            model=self.variant,
            top_k=5
        )
        return pirate_features

class Scorer:
    def __init__(self, client: goodfire.Client, variant: str):
        self.client = client
        self.variant = variant
    
    def score_features(self, target_behavior: Str, critique: Str, features):
        """Score a list of features to get their weights.

        Args:
            target_behavior (str): The desired behavior to evaluate against
            critique (str): A free-text critique evaluating how well the steered 
                output matches the target behavior given the input
            features (List[float]): List of feature values to score

        Returns:
            List[float]: Ordered list of feature weights between -1 and 1
        """
        weights = []
        return weights
    
class Judge:
    def __init__(self, client: goodfire.Client, variant: str):  
        self.client = client
        self.variant = variant
    
    def judge_output(self, target_behavior: Str, steered_model_output: Str, steered_model_input: Str):
        """Judge a steered model output against a target behavior.

        Args:
            target_behavior (str): The desired behavior to evaluate against
            steered_model_output (str): The output generated by the steered model
            steered_model_input (str): The input provided to the steered model
                (Can be a list of various inputs and outputs)

        Returns:
            str: A free-text critique evaluating how well the steered output
                matches the target behavior given the input
        """
        critique = ""
        return critique
    